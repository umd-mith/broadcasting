{"version":3,"file":"250-5c58a3afc2033af2daca.js","mappings":"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","sources":["webpack://broadcasting-a-v-data/./src/components/viz3.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport * as d3 from \"d3\"\nimport { D3DragEvent, Simulation, SimulationLinkDatum, SimulationNodeDatum } from \"d3\"\n\n/* *********************************\n* FIND AND FIX TYPING!! LOOK FOR : any *\n************************************/\nfunction color(d: string) {\n  switch (d) {\n    case \"NAEB\":\n      return \"#006847\" // green\n    case \"KUOM\":\n      return \"#FFD700\" // gold\n    case \"WHA\":\n      return \"#003884\" // blue\n    case \"NFCB\":\n      return \"#840a00\" // red\n    default:\n      return \"#2d2d2d\"\n  }\n}\n\ninterface Entity {\n  collections: string[]\n  bavdName: string\n  references: {\n    collection: string\n  }[]\n}\n\ninterface DataNode {\n  id: string,\n  group: string,\n  collections: string[]\n}\n\ninterface Link {\n  source: string\n  target: string\n  strength: number\n}\n\ntype datum = SimulationNodeDatum & DataNode\n\ninterface ExpandedLink {\n  index: number\n  source: datum\n  strength: number\n  target: datum\n}\n\n// Component\n\nconst Viz = () => {\n  const entityData = useStaticQuery(graphql`\n    query entitiesforviz3 {\n      allEntitiesJson {\n        nodes {\n          collections\n          bavdName\n          references {\n            collection\n          }\n        }\n      }\n    }\n  `)\n\nconst [show, setShow] = React.useState<string>(\"\")\n\n  // Set up nodes\n  const collections = new Set<string>()\n  const nodes: datum[] = entityData.allEntitiesJson.nodes.map((n: Entity) => {\n    n.collections.map(c => collections.add(c))\n    return {id: n.bavdName, group: \"CPF\", collections: n.collections}\n  }) // Only considering the first coll for now.\n  collections.forEach(c => nodes.push({id: c, group: \"collection\", collections: [c]}))\n\n  // Set up links\n  const links: Link[] = entityData.allEntitiesJson.nodes.reduce((acc: Link[], n: Entity) => {\n    const colls : {[key: string] : number} = {}\n    for (const r of n.references) {\n      colls[r.collection] ? colls[r.collection]++ : colls[r.collection] = 1\n    }\n    for (const coll of Object.keys(colls)) {\n      const link = {\n        source: n.bavdName,\n        target: coll,\n        strength: colls[coll]\n      }\n      acc.push(link)\n    }\n    return acc\n  }, [])\n\n  const nodeTitle = (d: DataNode) => d.id\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle)\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d => (d as datum).id).distance(function(d) {return ((1 / d.strength) * 200)}).strength(1))\n      .force(\"charge\", d3.forceManyBody().strength(-100))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n\n  const width = 2000\n  const height = 2000\n\n  const svg = d3.create(\"svg\")\n\n  const link = svg.append(\"g\")\n    .attr(\"stroke\", \"#8992A0\")\n    .attr(\"stroke-opacity\", 0.5)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\")\n      .attr(\"stroke-width\", 1)\n\n  const node = svg.append(\"g\")\n    .attr(\"fill\", \"currentColor\")\n    .attr(\"stroke-linecap\", \"round\")\n    .attr(\"stroke-linejoin\", \"round\")\n    .selectAll(\"g\")\n    .data(nodes)\n    .join(\"g\")\n    // .call(drag(simulation))\n\n  // const labels = node.append(\"g\")\n  if (T) node.append(\"title\").text((d: datum) => {\n    if (d.index === undefined) return \"\"\n    return T[d.index]\n  })\n\n  //  const label = labels.append(\"text\")\n  //      .attr(\"x\", 8)\n  //      .attr(\"y\", \"0.31em\")\n  //      .attr(\"dy\", \"-0.5em\")\n  //      .attr(\"text-anchor\", \"middle\")\n  //      .text(d => d.id)\n    \n  //  const labelOutline = label.clone(true).lower()\n  //      .attr(\"aria-hidden\", \"true\")\n  //      .attr(\"fill\", \"none\")\n  //      .attr(\"stroke\", \"white\")\n  //      .attr(\"stroke-width\", 3)\n\n  const circle = node.append(\"circle\").lower()\n    .attr(\"stroke\", \"#fff\")\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"r\", 5)\n    .attr(\"class\", d => d.collections.join(\" \"))\n\n  // simulation.tick(200)\n  // There must be a better way to handle types...\n  \n\n  const d3Ref = useRef<HTMLDivElement>(null)\n  const d3ZoomRef = useRef<SVGGElement>(null)\n\n  const [k, setK] = useState(1)\n  const [x, setX] = useState(0)\n  const [y, setY] = useState(0)\n\n  useEffect(() => {\n    const el = d3Ref.current\n    const z = d3ZoomRef.current\n    if (el && z) {\n      while(z.firstChild){\n        z.removeChild(z.firstChild)\n      }\n      simulation.on(\"tick\", () => {\n        link\n        .attr(\"x1\", (d: unknown) => (d as ExpandedLink).source.x?.toString() || \"\")\n        .attr(\"y1\", (d: unknown) => (d as ExpandedLink).source.y?.toString() || \"\")\n        .attr(\"x2\", (d: unknown) => (d as ExpandedLink).target.x?.toString() || \"\")\n        .attr(\"y2\", (d: unknown) => (d as ExpandedLink).target.y?.toString() || \"\")\n    \n        circle\n          .attr(\"cx\", d => d.x || \"\")\n          .attr(\"cy\", d => d.y || \"\")\n    \n    //    label\n    //        .attr(\"x\", d => d.x)\n    //        .attr(\"y\", d => d.y);\n      \n    //    labelOutline\n    //        .attr(\"x\", d => d.x)\n    //        .attr(\"y\", d => d.y);\n      })\n      const rawSvg = svg.node()\n      if (rawSvg) {\n        for (const child of Array.from(rawSvg.children)) {\n          z.append(child)\n        }\n      }\n\n      const zoom = d3.zoom().on(\"zoom\", (event) => {\n        const { x, y, k } = event.transform\n        setK(k)\n        setX(x)\n        setY(y)\n      })\n      // d3.select(el).call(zoom)\n\n    }\n  \n  }, [])\n\n  useEffect(() => {\n    const el = d3Ref.current\n    if (el && show) {\n      d3.select(el).selectAll(\"circle\")\n        .attr(\"fill\", (d) => {\n          return d.collections.indexOf(show) !== -1 ? color(show) : \"#2d2d2d\"\n        })\n    }\n  }, [show])\n\n  return (\n    <div id=\"entities\" className=\"page-programs programs entities\">\n        <section>\n          <h1>\n            Visualization\n          </h1>\n          <article>\n            <p>Introduction and info.</p>\n            <div onMouseOver={() => setShow(\"NAEB\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#006847\", display: \"inline-block\"}}></span> NAEB\n            </div>\n            <div onMouseOver={() => setShow(\"KUOM\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#FFD700\", display: \"inline-block\"}}></span> KUOM\n            </div>\n            <div onMouseOver={() => setShow(\"WHA\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#003884\", display: \"inline-block\"}}></span> WHA\n            </div>\n            <div onMouseOver={() => setShow(\"NFCB\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#840a00\", display: \"inline-block\"}}></span> NFCB\n            </div>\n          </article>\n        </section>\n        <section>          \n          {/* \n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n    .style(\"font\", \"5px sans-serif\") */}\n          <div ref={d3Ref}>\n            <svg viewBox={`${-width / 2} ${-height / 2} ${width} ${height}`}> \n              <g transform={`translate(${x},${y})scale(${k})`} ref={d3ZoomRef}/>\n            </svg>\n          </div>\n        </section>\n      </div>\n  )\n}\n\nexport default Viz"],"names":["entityData","useStaticQuery","React","show","setShow","collections","Set","nodes","allEntitiesJson","map","n","c","add","id","bavdName","group","forEach","push","links","reduce","acc","colls","references","r","collection","Object","keys","coll","link","source","target","strength","nodeTitle","d","T","d3","simulation","force","distance","svg","append","attr","selectAll","data","join","node","text","undefined","index","circle","lower","d3Ref","useRef","d3ZoomRef","useState","k","setK","x","setX","y","setY","useEffect","el","current","z","firstChild","removeChild","on","toString","rawSvg","Array","from","children","child","event","transform","indexOf","color","className","onMouseOver","style","width","height","backgroundColor","display","ref","viewBox"],"sourceRoot":""}