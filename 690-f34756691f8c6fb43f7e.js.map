{"version":3,"file":"690-f34756691f8c6fb43f7e.js","mappings":"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","sources":["webpack://broadcasting-a-v-data/./src/components/viz.tsx"],"sourcesContent":["import React, { useEffect } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport * as d3 from \"d3\"\nimport { D3DragEvent, Simulation, SimulationLinkDatum, SimulationNodeDatum } from \"d3\"\n\n/* *********************************\n* FIND AND FIX TYPING!! LOOK FOR : any *\n************************************/\nfunction color(d: string) {\n  switch (d) {\n    case \"NAEB\":\n      return \"#006847\" // green\n    case \"KUOM\":\n      return \"#FFD700\" // gold\n    case \"WHA\":\n      return \"#003884\" // blue\n    case \"NFCB\":\n      return \"#840a00\" // red\n    default:\n      return \"#2d2d2d\"\n  }\n}\n\n// Component\n\nconst Viz = () => {\n  const entityData = useStaticQuery(graphql`\n    query entitiesforviz {\n      allEntitiesJson {\n        nodes {\n          collections\n          bavdName\n        }\n      }\n    }\n  `)\n\n  const nodes = entityData.allEntitiesJson.nodes\n  const links = []\n\n  const [multiPlace, setMultiPlace] = React.useState<boolean>(false)\n  const [show, setShow] = React.useState<string>(\"\")\n\n  const d3Ref = React.useRef<HTMLDivElement>(null)\n  const width = 1000\n  const height = 1000\n  const scaleFactor = 1\n\n  const flattened: string[] = []\n  const groupIds = flattened.concat.apply([], nodes.map((n: any) => n.collections)) // flatten groups\n    .filter((v, i, s) => s.indexOf(v) === i) // remove duplicates\n    .map(groupId => {\n      return {\n        groupId,\n        count: nodes.filter((n: any) => n.collections.indexOf(groupId) > -1).length\n      }\n    })\n    .filter(g => g.count > 2)\n    .map(g => g.groupId)\n\n    const polygonGenerator = (groupId: string) => {\n      const node_coords: [number, number][] = node\n        .filter(function(d: any) { return d.collections.indexOf(groupId) > -1 })\n        .data()\n        .map(function(d: any) { return [d.x +25, d.y  +25] })\n        \n      return d3.polygonHull(node_coords)\n    }\n  \n    const valueline = d3.line()\n      .x((d) => d[0] )\n      .y((d) => d[1] )\n      .curve(d3.curveCatmullRomClosed)\n\n    function updateGroups(groupIds: string[]) {\n      groupIds.forEach(function(groupId: string) {\n        let centroid = [0, 0]\n        const path = paths.filter((d) => d == groupId)\n          .attr('transform', 'scale(1) translate(0,0)')\n          .attr('d', (d) => {\n            const polygon = polygonGenerator(d) as [number, number][]\n            centroid = d3.polygonCentroid(polygon)\n  \n            // to scale the shape properly around its points:\n            // move the 'g' element to the centroid point, translate\n            // all the path around the center of the 'g' and then\n            // we can scale the 'g' element properly\n            return valueline(\n              polygon.map(function(point) {\n                return [  point[0] - centroid[0], point[1] - centroid[1] ]\n              })\n            )\n          })\n  \n        const pathNode = path.node() as SVGPathElement\n  \n        d3.select(pathNode.parentNode as HTMLElement).attr('transform', 'translate('  + centroid[0] + ',' + (centroid[1]) + ') scale(' + scaleFactor + ')')\n      })\n    }\n\n    const drag = (simulation: Simulation<SimulationNodeDatum, SimulationLinkDatum<SimulationNodeDatum>>) => {\n  \n      function dragstarted(event: D3DragEvent<SVGImageElement, SimulationNodeDatum, {fx: number, fy: number, x: number, y: number}>) {\n        // setTooltip(null)\n        if (!event.active) simulation.alphaTarget(0.3).restart()\n        event.subject.fx = event.subject.x\n        event.subject.fy = event.subject.y\n      }\n      \n      function dragged(event: D3DragEvent<SVGImageElement, SimulationNodeDatum, {fx: number, fy: number, x: number, y: number}>) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      \n      function dragended(event: D3DragEvent<SVGImageElement, SimulationNodeDatum, {fx: number | null, fy: number | null}>) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = null;\n        event.subject.fy = null;\n      }\n      \n      // any: for some reason can't use SVGImageElement even though request type is BaseType | SVGImageElement\n      return d3.drag<any, unknown, SVGGElement>() \n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n    }\n\n     /*\n    \"NAEB\"\n    1\n    : \n    \"KUOM\"\n    2\n    : \n    \"WHA\"\n    3\n    : \n    \"NFCB\"\n    */\n\n  const groupPositionsX = (d: SimulationNodeDatum, groupIds: string[]) => {\n    const entity = nodes[d.index as number]\n    if (entity.collections.length === groupIds.length) {\n      return width/2\n    } else if (entity.collections.length === 1) {\n      if (entity.collections[0] === groupIds[0] || entity.collections[0] === groupIds[3]) {\n        return -width\n      }\n    } else if (entity.collections.length === 2) {\n      return width / 4\n    } else if (entity.collections.length === 3) {\n      return width / 3\n    }\n    return width\n  }\n\n  const groupPositionsY = (d: SimulationNodeDatum, groupIds: string[]) => {\n    const entity = nodes[d.index as number]\n    if (entity.collections.length === groupIds.length) {\n      return height/2\n    } else if (entity.collections.indexOf(\"NAEB\") > -1) {\n      return -height\n    } else if (entity.collections.indexOf(\"KUOM\") > -1) {\n      return -height\n    } else if (entity.collections.indexOf(\"WHA\") > -1) {\n      return height/2\n    } else if (entity.collections.indexOf(\"NFCB\") > -1) {\n      return height/2\n    }\n    return height\n  }\n\n  const simulation = d3.forceSimulation(nodes)\n    // .force(\"link\", d3.forceLink(links).id(d => {\n    //   // This type casting is awkward and likely should be handled by extending SimulationNodeDatum\n    //   const l = d; return l.id\n    // }).distance((d) => {\n    //   const groupsFactor = nodes.filter((n) => n.id === links[d.index].target)[0].groups.length + 1\n    //   return 100 / groupsFactor\n    // }))\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"collisionForce\", d3.forceCollide(25))\n    .force(\"yPosition\", d3.forceY((d) => groupPositionsY(d, groupIds)))\n    .force(\"xPosition\", d3.forceX((d) => groupPositionsX(d, groupIds)))\n    .force(\"center\", d3.forceCenter(width*3, height))\n    .stop()\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", `0 0 ${width*6} ${height*6}`)\n\n  const groups = svg.append('g').attr('style', 'fill-opacity: .1; stroke-opacity: 1;')\n\n  console.log(show)\n  const node = svg.append(\"g\")\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      .attr(\"fill\", (d) => d.collections.indexOf(show) !== -1 ? color(show) : \"#2d2d2d\")\n      .attr(\"stroke\", \"#2d2d2d\")\n      .attr(\"stroke-opacity\", 1)\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"r\", 20)\n      .attr(\"class\", d => d.collections.join(' '))\n      // .call(drag(simulation))\n\n  node.append(\"title\").text(({index: i}) => `${nodes[i].bavdName} in ${nodes[i].collections.join(', ')}`)\n\n  // const node = svg.append(\"g\")\n  //   .selectAll(\"image\")\n  //   .data(nodes)\n  //   .join(\"image\")\n  //     .attr(\"height\", (d) => 50)\n  //     .attr(\"style\", (d) => {\n  //       let s = \"cursor: pointer;\"\n  //       return s\n  //     })\n  //     .attr(\"alt\", (d) => d.bavdName)\n  //     .attr(\"xlink:href\", (d) => {\n  //       return \"https://scholarlyediting.org/issues/39/mabel-dodge-luhans-whirling-around-mexico-a-selection/static/772dea01572cfb5fd7bfe97f51ca3f5e/1f8a1/placeholder.png\"\n  //     })\n  //     .call(drag(simulation))\n\n  const paths = groups.selectAll('.path_placeholder')\n    .data(groupIds)\n    .enter()\n    .append('g')\n    .attr('class', 'path_placeholder')\n    .append('path')\n    .attr('stroke', (d) => color(d) )\n    .attr('fill', (d) => color(d) )\n    .attr('opacity', 0)\n\n  paths\n    .transition()\n    .duration(2000)\n    .attr('opacity', 1)\n\n  // Tick it a determined number of times without drawing\n  simulation.tick(200)\n\n  // simulation.on(\"tick\", () => {\n  // })\n  \n  node\n      .attr(\"cx\", (d: any) => d.x)\n      .attr(\"cy\", (d: any) => d.y)\n\n  updateGroups(groupIds)\n\n  useEffect(() => {\n    const el = d3Ref.current\n    if (el) {\n      while(el.firstChild){\n        el.removeChild(el.firstChild)\n      }\n      d3Ref.current.append(svg.node() as Node)\n    }\n  \n  }, [show])\n\n  return (\n    <div id=\"entities\" className=\"page-programs programs entities\">\n        <section>\n          <h1>\n            Visualization\n          </h1>\n          <article>\n            <p>Introduction and info.</p>\n            <div onMouseOver={() => setShow(\"NAEB\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#006847\", display: \"inline-block\"}}></span> NAEB\n            </div>\n            <div onMouseOver={() => setShow(\"KUOM\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#FFD700\", display: \"inline-block\"}}></span> KUOM\n            </div>\n            <div onMouseOver={() => setShow(\"WHA\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#003884\", display: \"inline-block\"}}></span> WHA\n            </div>\n            <div onMouseOver={() => setShow(\"NFCB\")}>\n              <span style={{width: \"10px\", height: \"10px\", backgroundColor: \"#840a00\", display: \"inline-block\"}}></span> NFCB\n            </div>\n          </article>\n        </section>\n        <section>\n          <div ref={d3Ref}/>\n        </section>\n      </div>\n  )\n}\n\nexport default Viz"],"names":["color","d","nodes","useStaticQuery","allEntitiesJson","React","show","setShow","d3Ref","width","height","groupIds","concat","apply","map","n","collections","filter","v","i","s","indexOf","groupId","count","length","g","valueline","d3","x","y","curve","simulation","force","entity","index","groupPositionsY","groupPositionsX","stop","svg","attr","groups","append","console","log","node","selectAll","data","join","text","bavdName","paths","enter","transition","duration","tick","forEach","centroid","pathNode","polygon","node_coords","polygonGenerator","point","parentNode","updateGroups","useEffect","el","current","firstChild","removeChild","id","className","onMouseOver","style","backgroundColor","display","ref"],"sourceRoot":""}